 #contents
 
 *HTMLとは
 Webサイトの本当の姿。
 HyperTextMarkupLanguageの略
 
 *最小のHTML
 #sh(html){{
 <!DOCTYPE HTML>
 <html lang="ja">
 <head>
        <meta charset="UTF-8" />
        <title>タイトル</title>
 </head>
 <body>
        <p>本文</p>
 </body>
 </html>
 }}
 ~
 
 **DOCTYPE
 #sh(html){{
 <!DOCTYPE HTML>
 }}
 HTMLだよ〜という宣言。HTML5から楽になった。
 ~
 
 **要素
 #sh(html){{
 <開始タグ>内容</終了タグ>
 }}
 ここまでを一つの'''要素'''と呼ぶ
 ~
 
 **終了タグのない要素
 #sh(html){{
 <meta ... />
 }}
 のような、1つのタグで完結する要素もある。
 #sh(html){{
 <meta ...>
 }}
 のように、スラッシュを省略する事も可能。
 ~
 
 **なぜタグが必要なの？
 #sh(html){{
 <title>タイトル</title>
 }}
 のように、意味付けを行っている。
 通常はブラウザは平文を理解できないので、なにがタイトルで、なにが重要で、を教えて上げるためのラベル。
 -
 
 **属性
 #sh(html){{
 <meta charset="UTF-8">
 }}
 の、一つのタグの中の付加情報の事。
 この場合charsetが属性名、UTF-8が属性値になる。
 ~
 
 **インデント
 インデントはヘッダーとボディは下げない。その下から下げるべき。
 ~
 
 **HTMLソース内の改行
 ソースの中に連続した半角スペース、改行、タブをいくらいれても、
 その連続した空白文字群を'''１つの半角スペース'''として勝手に変換される。
 
 
 **知っておくべきタグ
 よく使われる20個ほどさえマスターしておけば、他は必要に応じて検索すれば良い。
 ~
 
 
 *HTML基本タグ集
 
 **html
 コンテンツの始まりと終わりを意味するタグ
 #sh(html){{
 <html lang="ja">
 ...
 </html>
 }}
 ~
 
 
 **head
 メタ情報の埋め込みや、外部ファイルの取り込みを行うタグ
 #sh(html){{
 <head>
     <meta charset="UTF-8" />
     <script src="somewhere.js"></script>
     <link rel>
 </head>
 }}
 ~
 
 
 **meta
 metaタグ自体はなんの意味もない。metaの属性が有用な情報
 metaタグ以降のコンテンツ全てにてきようされる文字コードの情報や、
 検索ロボット用に、サイト自体を説明する情報
 #sh(html){{
 <meta charset="UTF-8" />
 }}
 のように、utf-8が一般的、このタグがないと文字化けするので必須。
 ※WindowsのローカルPCで保存したファイルはデフォルトでSHIFT_JISなので、
 保存する段階から、UTF-8で保存しないといけない。
 ~
 
 **title
 タイトルタグはHTMLのドキュメントには表示されず、ブラウザのタブにのみ表示される。
 #sh(html){{
 <title>ブラウザタブに表示される文字列</html>
 }}
 ~
 
 **body
 メインコンテンツを全部ここに書く
 ~
 
 **p
 文章の段落分けを行うタグ。自動で改行が挿入される。
 #sh(html){{
 <p>パラグラフだよ</p>
 }}
 ~
 
 **コメント文
 ブラウザには表示されない。ソースを見るエンジニアにのみ、説明をするための文章
 #sh(html){{
 <!-- コメント -->
 }}
 ~
 
 
 **h1~h6
 h1が最大、h6が最小
 #sh(html){{
 <h1>見出し1</h1>
 }}
 ~
 
 **strong
 文章を一部強調する。Wordで言うctrl+Bのような太字処理
 #sh(html){{
 <strong>太字</strong>
 }}
 ~
 
 **br
 改行タグ
 #sh(html){{
 <br/>
 }}
 ~
 
 **hr
 水平線タグ (horizontal line)
 横の実線を1本入れる。
 #sh(html){{
 <hr />
 }}
 ~
 
 **ol、li
 順序ありリスト(ordered list)
 pukiwikiで言う+のようなもの
 リストの各項目はli(list index)で囲む
 #sh(html){{
 <ol>
     <li>項目1</li>
     <li>項目2</li>
 </ol>
 }}
 ~
 
 **ul、li
 順序なしのリスト、pukiwikiで言う-のようなもの
 #sh(html){{
 <ul>
     <li>項目1</li>
     <li>項目2</li>
 </ul>
 }}
 ~
 
 **a
 リンクをつけるタグ
 hrefにハイパーリンクのurl、target="_blank"は、新たなWindowを生成するの意味
 ちなみに、targetに_blankを指定しなくても、なにかしら値を指定すれば新しいWindowで開いてくれる。
 aタグで囲まれた中にimgを入れたり、リンクのラベルはなんでも良い
 #sh(html){{
 <a href="url" target="_blank">リンク対象のラベル</a>
 }}
 ~
 
 **img
 画像を貼付けるタグ。srcはソース、alt(alternate)は画像が表示されない時の代用の文字列
 #sh(html){{
 <img src="..." alt="..." />
 }}
 ~
 
 **table、thead、tbody、tr、th、td
 tableは大枠、borderは枠線の太さ
 theadは最上行。それぞれの行のヘッダー、1つのtrのみを入れる習わし
 tbodyは実際のテーブルの内容
 thはヘッダーとなるべきセル、太線で囲まれる
 trはtable row、すなわち各行
 tdはtable data、すなわち行中の各セル
 #sh(html){{
 <table border="1">
     <thead>
         <tr>
             <th>...</th>
             <th>...</th>
         </tr>
     </thead>
     <tbody>
         <tr>
             <th>...</th>
             <td>...</td>
         </tr>
     </tbody>
 </table>
 }}
 ~
 
 
 **div、span
 ある範囲を１つのまとまりとして扱う意味。
 idやclassを付けて、その範囲全体にCSSを適用させるためのもの。
 divは色んなタグを含んだ大きな範囲。"container"は、ヘッダーやフッター以外の本体内容をまとめるのによく使われる。
 spanは短い範囲に使う。
 #sh(html){{
 <div class="container">
    ...
 </div>
 }}
 #sh(html){{
 <span id="...">
    ...
 </span>
 }}
 ~
 
 **link
 CSSファイルを読み込む時に使う。
 head内の中に書く。
 #sh(html){{
 <link rel="stylesheet" href="style.css" />
 }}
 ~
 
 
 *ブロックとインライン
 ブロック要素は、デフォルトで、左端〜右端までがブロック範囲。上下に勝手に改行が入る。
 インライン要素は端から端まで伸びず、最小限に収まる。改行も入れない。
 ブロック要素はインライン要素を囲める。
 インライン要素はブロック要素を囲めない。spanの中にdivがあると、divはspanのスタイルや色の影響を一切受けない。
 |ブロック要素|div、p、h1、ol、ul|
 |インライン要素|span、strong、a、img|
 ~
 
 
 *CSSとは
 [[CSSデザインチュートリアル:http://ja.learnlayout.com/]]
 Cascading Style Sheetsの略。見栄えのスタイルを定義するための言語。
 Twitter Bootstrapを使うと、既に用意されてる美しいCSSがあるので、デザインが楽。
 ~
 *CSSの書き方
 #sh(css){{
 セレクタ: {
     プロパティ: 値;
 }
 }}
 セレクタは、適用範囲の事。タグ名や、class、idなどを指定。
 プロパティは、スタイルの種類、値はスタイルによって異なる。
 値の後には必ず;をつける。
 ~
 
 **CSSの適用方法
 1、head内にstyleタグを作って直接書き込む
 #sh(html){{
 <head>
     <style>
         p {
             color: red;
         }
     </style>
 </head>
 }}
 ~
 2、タグのstyle属性に直接書き込む
 #sh(html){{
 <p style="color: green; font-size: 10px;">あいうえお</p>
 }}
 ~
 
 ３、linkタグで外部cssファイルを読み込む。htmlファイルとcssファイルを分離したほうが良いので、こうするべき。
 #sh(html){{
 <head>
     <link rel="stylesheet" type="text/css" href="test.css"/>
 </head>
 }}
 ~
 
 **CSSの順序
 基本的に下に書いたもののほうが優先される。
 ただし、同じタグでも、より詳細に記述されてるもののほうが優先順位高い。
 *セレクタの書き方
 **タグ指定
 タグ指定で、同じタグ全てに適用
 #sh(html){{
 html {
     color: green;
 }
 }}
 ~
 
 **ID指定
 id指定で単一の特定の範囲のみ適用、タグ名省略可
 IDをタグに付ける時は、基本的に唯一無二のIDを付けるべき。
 #sh(html){{
 div#idLee {
     color: red;
 }
 
 #idLee {
     color: red;
 }
 }}
 ~
 
 **Class指定
 class指定で同一クラスのグループ全部に適用、タグ名省略可
 #sh(html){{
 div.classLee {
     color: green;
 }
 
 .classLee {
     color: green;
 }
 }}
 ~
 
 **ワイルドカード
 全てのタグを初期化する時に使う。
 #sh(html){{
 * {
    margin: 0px;
    padding: 0px;
 }
 }}
 ~
 
 **hover等の疑似要素
 要素で指定した条件下の時のみ適用。
 #sh(html){{
 セレクタ:疑似要素 {
     プロパティ: 値;
 }
 p:hover {
     color: red;
 }
 }}
 ~
 
 **セレクタ複数指定
 複数のセレクタに同じスタイルを適用
 #sh(html){{
 div, p {
    color: red;
 }
 }}
 ~
 
 **子孫セレクタ(入れ子条件)
 親セレクタの中にある子セレクタのみに適用。
 子セレクタが他の場所で独立していたら適用されない。
 #sh(html){{
 親セレクタ 子セレクタ {
     color: red;
 }
 
 <div>
     <ol>
         <li>
         </li>
     </ol>
 </div>
 
 div li {
     color: red;
 }
 }}
 ~
 
 **子限定セレクタ
 子セレクタが親セレクタの直下(直属の1層下)の時のみに適用させる時は
 #sh(html){{
 親セレクタ > 子セレクタ {
     color: red;
 }
 
 <div>
     <ol>
         <li>
         </li>
     </ol>
 </div>
 
 div > ol {
     background-color: sky-blue;
 }
 }}
 ~
 
 **隣接条件
 直前の隣接セレクタがセレクタ1の場合のみ、セレクタ2に適用される。
 #sh(html){{
 セレクタ1 + セレクタ2 {
     color: red;
 }
 
 <div></div>
 <p></p>
 
  div + p {
     color: blue;
 }
 }}
 ~
 
 
 *CSSのボックスモデル
 CSSはセレクタで選択した各要素を、'''１つのボックス'''として認識してる。
 spanのようなinline要素なら最小限の大きさのボックス、divのようなblock要素なら端から端までが1つのボックスになる。
 ボックスの外側にmargin、ボックスの内側にpaddingがあり、paddingの内側がコンテンツエリア。
 コンテンツエリア内には別のタグ(ボックス)が入る。
 #ref(Ruby/TechAcademy/Lesson1/margin1.png,center,100%)
 ~
 *プロパティと値
 **color、background-color
 colorプロパティなどで指定できる色の表現方法は様々。
 +red、blue、green、grayなど言葉で表現。
 +#FFFの三桁16進数
 +#ffffffの6桁16進数
 +rgba(255, 255, 255, 1)
 ~
 
 **font-size
 フォントの大きさ指定。pxや%やemなどの指定ができる。
 pxはピクセル数。
 ~
 
 
 **font-family
 何種類ものフォントを連ねて指定できる。
 表示できるフォントは個々のPCやブラウザが表示できるフォントに依存するので、
 ここに大量に書いておけば、左から順番読み込んでブラウザで表示できるか試してくれる。
 左のほうが優先順が高い。
 #sh(html){{
 body {
   font-size: 14px;
   font-family: YuGothic, "游ゴシック", "メイリオ", Meiryo, "ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", sans-serif;
 }
 }}
 ~
 
 **display
 block、inline、inline-blockなどの、要素の定義を書き換える
 inline-blockは、見せ方をinline(端から端までではなく、最小限の領域)に変更し、ネスト内での影響力をblockとする。
 #sh(html){{
 nav ul li {
    display: inline-block;
 }
 }}
 ~
 
 **margin → border → padding
 marginは外側の余白、
 borderはmarginとpaddingの境界線
 paddingは内側の余白
 marginとpaddingは上下左右それぞれ指定しても、一括で指定してもOK
 #sh(html){{
 div {
     /*  上下左右とれぞれ指定するやり方  */
     margin-top: 10px;
     margin-right: 20px;
     margin-bottom: 30px;
     margin-left: 40px;
 
     /* 上下左右それぞれ指定する省略形  */
     margin: 10px 20px 30px 40px;
 
     /* 上下と左右の2回だけ指定する */
     margin: 100px 200px;
 
     /*  上下左右まとめて同じ分だけ指定 */
     margin: 50px;
 }
 }}
 ~
 HTMLはブラウザがデフォでbodyにもheadにもmarginとpaddingを入れるので、最初に全消去する手法が使われる。
 #sh(css){{
 * {
    margin: 0;
    padding: 0;
 }
 }}
 ~
 
 **text-align
 あるCSS'''ボックス領域内のコンテンツ'''のみの位置を調整。
 center、right、left、top、bottomを指定する。
 #sh(html){{
 <div>
     <img src="..." alt="..."/>
 </div>
 
 div {
    text-align: center;
 }
 }}
 この場合、div内のコンテンツは全てセンタリングされるので、画像も中央寄りになる。
 ~
 
 **text-decoration
 テキストに上線、下線、打ち消し線を付ける
 noneはスタイルなし。
 underlineは下線。
 overlineは上線。
 line-throughは打ち消し線。
 blinkは点滅。
 #sh(css){{
 a {
     text-decoration: none;
     text-decoration: underline;
     text-decoration: overline;
     text-decoration: line-through;
     text-decoration: blink;
 }
 }}
 ~
 
 **font-weight
 タグないコンテンツの、文字の太さ
 #sh(css){{
 a {
     font-weight: bold;
 }
 }}
 ~
 
 
 **background-image
 borderより内側に画像を生成。paddingは画像領域に含まれる。marginは含まれない。
 ※通常のimgタグにmarginとpaddingを設定する場合、imgはpaddingの内側になるが、backgroundの場合は特殊
 background-imageに画像のURL指定。画像ファイルのパーミションに気をつける。
 background-positionに横と縦の位置を指定。left right top bottom
 background-sizeにcoverを入れると、アスペクト比を維持したまま、背景領域を覆うように幅いっぱい広げてくれる。
 background-repeatをno-repeatにすると、繰り返しをなくす。
 
 #sh(css){{
 header {
     background-image: url("bg.jpg");
     background-position: center center;
     background-size: cover;
     background-repeat: no-repeat;
 }
 }}
 ~
 
 
 **丸角border
 max-widthとmax-heightは、borderを丸めたあとのboudingboxの幅と高さの上限。必ずこれ以下になる。
 borderはボーダーラインの太さ、solidかdottedか、色。
 border-radiusを100%にすると完全な円になる。
 border-radius: 20% 20% 20% 50%;のように、左上、右上、右下、左下の順に単独指定も可能
 #sh(css){{
 img {
 	max-width: 400px;
 	max-height: 400px;
 	border: 5px solid #ffffff;
 	border-radius: 100%;
 }
 }}
 ~
 
 **letter-spacing
 文字と文字の間隔。px指定もできるがemが一般的。
 1em=1文字分なので、0.2emとか指定すると、文字と文字の間隔が0.2文字分になる。
 #sh(css){{
 h1 {
    letter-spacing: 0.15em;
 }
 }}
 ~
 
 **text-shadow
 右側の影、下側の影、影のぼかし具合(丸め具合)、影の色
 という4値を指定する。
 #sh(css){{
 h1 {
     text-shadow: 1px 1px 1px #000;
 }
 }}
 ~
 
 **width、height
 ボックスモデルはmarginの内側にborderがあり、borderの内側にpaddingがある。paddingの内側にコンテンツがある
 このwidthとheightはコンテンツの幅と高さになるので、実際の表示では、
 300×300のコンテンツ領域の外側に50×2のpaddingがあって、その外側に10×2のborderが表示されるので、
 borderの外側から計ったら420×420のボックスになる。
 #sh(css){{
 div {
    width: 300px;
    height:300px;
    padding: 50px;
    border: 10px;
 }}
 }
 ~
 
 **box-sizing
 box-sizing:border-boxという指定をすると、widthとheightの適用範囲が、paddingの内側ではなく、
 borderの外側が基準になる。全要素に適用させておくと、直感的に扱いやすくなる。
 #sh(css){{
 * {
   -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
           box-sizing: border-box;
 }
 }}
 ~
 
  **max-width、max-height
 通常のwidthとheightだと大きさ固定されるので、携帯で開く時でも小さく縮めてくれない。
 ゆえにHTML5ではmax-widthとmax-heightを推奨してる。画面が小さくなった時に自動でそれ以下に収まってくれる。
 #sh(css){{
 div {
     max-width:100px;
     max-height: 100px;
 }
 }}
 ~
 
 **margin:auto
 ブロックレベル要素にmax-widthを指定すると、横幅は画面いっぱいではなく、決められた大きさ以下になってくれる。
 marginをautoとする事で上下左右中央に来るようになる。autoを複数指定して、上下、左右を個別で指定してもOK
 ちなみにmargin: -100pxという負を値を指定すると、上の要素の領域にはみ出る。
 #sh(css){{
 div.container {
     max-width: 500px;
     margin:  -100px auto 0;
 }
 }}
 ~
