 [[CSS]]
 #contents
 
 *Bootstrapとは
 Twitter社が開発したCSSのフレームワーク
 汎用CSSデザインが予め定義されてるので、
 これを使えば素早く整ったCSSデザインを作れる。
 [[Bootstrap公式サイト:http://getbootstrap.com/]]
 [[Bootstrap解説:http://cccabinet.jpn.org/bootstrap3/css.php]]
 ~
 
 *Responsive Web Design
 Webデザイン手法の１つで、単一のWebページだけで、Android、iOS、PCブラウザ等全てに対応させる手法。
 かつては、画面サイズの異なるデバイスに対してWebサイトを表示させた際に、
 複数の異なるHTMLファイルを個別に用意していた。しかしこれでは手間なので、
 最近ではこのレスポンシブウェブデザインが提唱された。機器の画面サイズに応じて、
 自動で表示内容が最適に変化するような、フレキシブルなWebページを1つだけ用意する手法。
 更新の手間が省ける。GoogleのSEO対策にも良い。
 Bootstrapはこのレスポンシブウェブデザインに対応している。
 Bootstrapでは、ブラウザの横幅を基準にしてレスポンシブウェブデザインを生成する。
 ~
 
 *Bootstrapの読み込み
 metaのIE-edgeは、IEの無駄な互換モード機能をOFFにするためのもの。最新バージョンで表示させれば良い。
 metaのwidth=device-widthは、レスポンシブウェブデザインの初期設定。widthをデバイスの横幅に設定している。
 linkしてる外部ソースは、maxcdnのものはBootstrapのもの。
 しかしbootstrap.jsはjqueryに依存するので、その前にjqueryを読み込んでおく。
 
 #sh(html){{
 <!DOCTYPE html>
 <html lang="ja">
 <head>
     <meta charset="utf-8">
     <meta http-equiv="X-UA-Compatible" content="IE=edge">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <title>Bootstrap Sample</title>
     <!-- BootstrapのCSS読み込み -->
     <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
     <!-- jQuery読み込み -->
     <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
     <!-- BootstrapのJS読み込み -->
     <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
 </head>
 <body>
     <h1>Hello, world!</h1>
 </body>
 </html>
 }}
 ~
 
 *グリッドデザイン
 グリッドデザイン全体を入れるためのcontainerのclassを作って、
 containerの中で各行ごとにrowのclassを作る。
 １つのrow(1行)の中で、col-{prefix}-{コラム数}を複数いれて、コラム数(セル数)が合計12個になれば良い。
 col-{prefix}で指定するprefixは1グリッド(セル)の横幅に影響する。
 col-{prefix}-offsetはその要素の直前に入れる空白グリッドの数
 smは最大62、mdは最大81、lgは最大97pixel。fluidに指定しない限り、1グリッドの長さはこの長さを超える事はない。
 hideen-{prefix}を入れる事で、その画面の大きさのデバイスでは非表示、とする事が可能。
 xsは768px以下の携帯
 smは768〜992のタブレット
 mdは992〜1200のデスクトップPC
 lgは1200以上の高解像度PC
 ~
 
 container-fluid ⇒ row の書き方だと、内部の各グリッドが可変長になる。
 画面サイズがめちゃめちゃ長くなっても、1グリッドのサイズは常に横幅/12になる。
 #sh(html){{
 <div class="container-fluid">
     <div class="row">
         <div class="col-sm-2" style="background-color:red;">Red</div>
         <div class="col-sm-6 hidden-sm" style="background-color:blue;">Blue</div>
         <div class="col-sm-4" style="background-color:yellow;">Yellow</div>
     </div>
 </div>
 }}
 ~
 
 container ⇒ row の方法だと、1グリッドの幅は固定長になる。
 #sh(html){{
 <div class="container">
     <div class="row">
         <div class="col-sm-2" style="background-color:red;">Red</div>
         <div class="col-sm-6 hidden-sm" style="background-color:blue;">Blue</div>
         <div class="col-sm-4" style="background-color:yellow;">Yellow</div>
     </div>
 </div>
 }}
 ~
 
 デバイスに応じてデザインをきっちり使い分けたい時は、複数のclassを指定すると、完璧なデザインになる。
 #sh(html){{
 <div class="col-lg-3 col-md-4 col-sm-6">テキスト文です</div>
 }}
 ~
 *table系class
 **table-striped
 classにtable table-stripedを入れれば各行が縞模様になる
 #sh(html){{
 <table class="table table-striped">
     ....
 </table>
 }}
 ~
 
 **table-bordered
 classにtable table-borderedを入れれば枠線
 #sh(html){{
 <table class="table table-bordered">
     ....
 </table>
 }}
 ~
 
 **table-responsive
 tableそのものではなく、tableの外に、table-responsiveというdiv領域を作ってあげれば、
 携帯などの横幅が小さい端末で開いても、tableが圧縮されすぎて潰れる事はなくなる。代わりに横スクロープが可能になる
 ただし、tableタグにはclass="table"を入れてある前提。
 #sh(html){{
 <div class="container">
     <div class="table-responsive">
         <table class="table">
             ....
         </table>
     </div>
 </div>
 }}
 ~
 
 *btn系class
 **btn-{design}
 classの値に、btn btn-{prefix}を追加すれば、予め決められた数通りのデザインを呼び出せる。
 aタグとbuttonタグのどちらにも同じように適用される。
 #ref(CSS/Bootstrap/button.png,left,100%);
 #sh(html){{
 <a href="..." class="btn btn-primary">link</a>
 <a href="..." class="btn btn-success">link</a>
 
 <button type="button" class="btn btn-default">Default</button>
 <button type="button" class="btn btn-primary">Primary</button>
 <button type="button" class="btn btn-success">Success</button>
 <button type="button" class="btn btn-info">Info</button>
 <button type="button" class="btn btn-warning">Warning</button>
 <button type="button" class="btn btn-danger">Danger</button>
 <button type="button" class="btn btn-link">Link</button>
 }}
 ~
 
 **btn-{size}
 classの値に、btn btn-{size}を追加すれば、画面の大きさに適したサイズのボタンを簡単に作れる
 aタグも同じように使える
 #sh(html){{
 <a href="..." class="btn btn-primary btn-lg">link</a>
 <a href="..." class="btn btn-primary btn-default">link</a>
 <a href="..." class="btn btn-primary btn-sm">link</a>
 <a href="..." class="btn btn-primary btn-xs">link</a>
 
 <button type="button" class="btn btn-primary btn-lg">Large button</button>
 <button type="button" class="btn btn-primary btn-default">Default button</button>
 <button type="button" class="btn btn-primary btn-sm">Small button</button>
 <button type="button" class="btn btn-primary btn-xs">Extra small button</button>
 }}
 ~
 
 **btn-block
 classの値に、btn btn-blockを追加すると、
 そのタグがブロックレベル要素になり、画面いっぱいまで広がるボタンになる。
 (aタグもbuttonタグもデフォルトではinlineレベル要素)
 #sh(html){{
 <button type="button" class="btn btn-primary btn-lg btn-block">Block level button</button>
 <button type="button" class="btn btn-default btn-lg btn-block">Block level button</button>
 }}
 ~
 
 *form系class
 [[公式form解説:http://getbootstrap.com/css/?#forms]]
 **form-group、from-control
 form内で、部品を<div class="form-group"></div>で囲むと、その中が1つのレスポンシブformモジュールになる。
 更に、inputのclassにform-controlを指定すれば、レスポンシブに画面サイズと連動する入力領域になる。
 
 #sh(html){{
 <form>
 
 	<div class="form-group">
 	    <label for="exampleInputEmail1">Email address</label>
 	    <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
 	</div>
 
 	<div class="form-group">
 	    <label for="exampleInputPassword1">Password</label>
 	    <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
 	</div>
 
 	<div class="form-group">
 	    <label for="exampleInputFile">File input</label>
 	    <input type="file" id="exampleInputFile">
 	    <p class="help-block">Example block-level help text here.</p>
 	</div>
 
 	<button type="submit" class="btn btn-default">Submit</button>
 </form>
 }}
 ~
 
 
 **form-inline
 一番外側にあるformタグのclassになにも設定しなければ、どのinputも1行(block要素)として最適化される。
 全ての入力要素を1行以内に詰め込みたい場合はformのclassにform-inlineを指定すれば良い。
 #sh(html){{
 <form class="form-inline">
 
     <div class="form-group">
         <label for="exampleInputName2">Name</label>
         <input type="text" class="form-control" id="exampleInputName2" placeholder="Jane Doe">
     </div>
 
     <div class="form-group">
         <label for="exampleInputEmail2">Email</label>
         <input type="email" class="form-control" id="exampleInputEmail2" placeholder="jane.doe@example.com">
     </div>
 
     <button type="submit" class="btn btn-default">Send invitation</button>
 
 </form>
 }}
 ~
 
 **form-horizontal
 formのclassにform-horizontalを入れると、各行に1個ずつ部品を配置し、
 各部品(各行)間のスペースを適切に空けてくれる。
 #sh(html){{
 <form class="form-horizontal">
 
 	<div class="form-group">
 		<label for="inputEmail3" class="col-sm-offset-1 col-sm-2">Email</label>
 		<div class="col-sm-8">
 			<input type="email" class="form-control" id="inputEmail3" placeholder="Email">
 		</div>
 	</div>
 
 	<div class="form-group">
 		<label for="inputPassword3" class="col-sm-offset-1 col-sm-2">Password</label>
 		<div class="col-sm-8">
 			<input type="password" class="form-control" id="inputPassword3" placeholder="Password">
 		</div>
 	</div>
 
 	<div class="form-group">
 		<div class="col-sm-offset-1 col-sm-10">
 			<div class="checkbox">
 				<label>
 					<input type="checkbox"> Remember me
 				</label>
 			</div>
 		</div>
 	</div>
 
 	<div class="form-group">
 		<div class="col-sm-offset-1 col-sm-10">
 			<button type="submit" class="btn btn-default">Sign in</button>
 		</div>
 	</div>
 </form>
 }}
 ~
 
 
 *navbar
 サイト上部のメニューバーをレスポンシブにしたclass
 携帯などの横幅が小さいデバイス上で、折り畳んだ状態にしてくれる。
 ~
 
 *collapsed
 最初にnavbar-header内に、navbar-toggle collapsedのボタンを1つ作って、ターゲットをsite-menuにしておく
 下にid=site-menuの領域を作って、その中にメニューアイテムを配置していく。
 この領域のclassにcollapsedを指定しておくと、スマフォで見た時に、メニューが閉じた状態からスタートする。
 navbar-collapseを指定すると、PCで見た時にメニューが展開した状態で表示される。
 
 #sh(html){{
 <header>
     <nav class="navbar navbar-default">
         <div class="container-fluid">
 
             <div class="navbar-header">
                 <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#site-menu">
                     <span class="sr-only">Toggle navigation</span>
                     <span class="icon-bar"></span>
                     <span class="icon-bar"></span>
                     <span class="icon-bar"></span>
                 </button>
                 <a class="navbar-brand" href="#">
                     サンプル株式会社
                 </a>
             </div>
 
 
             <div class="collapse navbar-collapse" id="site-menu">
                 <ul class="nav navbar-nav navbar-right">
                     <li><a href="#">会社情報</a></li>
                     <li><a href="#">事業情報</a></li>
                     <li><a href="#">ニュース</a></li>
                     <li class="active"><a href="#">お問い合わせ</a></li>
 
                     <li class="dropdown">
                         <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">
                             採用情報
                             <span class="caret"></span>
                         </a>
                         <ul class="dropdown-menu" role="menu">
                             <li><a href="#">新卒採用</a></li>
                             <li><a href="#">キャリア採用</a></li>
                         </ul>
                     </li>
 
                 </ul>
             </div>
 
         </div>
     </nav>
 </header>
 }}
 ~
 
 **navbar-default
 ナビバーのアイテムは基本この中に書く
 #sh(html){{
 <nav class="navbar navbar-default">
     <div class="container-fluid">
         ...
     </div>
 </nav>
 }}
 ~
 
 **.navbar-bran
 ナビメニューの左上に、自社のブランドロゴ(画像)もしくはブランド文字列を表示させる。
 #sh(html){{
 <nav class="navbar navbar-default">
     <div class="container-fluid">
 
         <div class="navbar-header">
             <a class="navbar-brand" href="#">
                 <img alt="Brand" src="...">
             </a>
         </div>
 
     </div>
 </nav>
 }}
 ~
 
 **.navbar-form
 navbar-formで埋め込み式form作れる。.navbar-leftで左寄り。
 
 #sh(html){{
 <nav class="navbar navbar-default">
     <div class="container-fluid">
 
         <form class="navbar-form navbar-left" role="search">
             <div class="form-group">
                 <input type="text" class="form-control" placeholder="Search"/>
             </div>
             <button type="submit" class="btn btn-default">Submit</button>
         </form>    
 
     </div>
 </nav>
 }}
 ~
 
 *glyphicon
 Bootstrapではフリーで使えるiconが180種類ある。
 classに、glyphicon glyphicon-{name}
 と指定してあげれば、用意されてるiconをロードできる。
 #sh(html){{
 <div class="icon col-sm-3 hidden-xs">
     <span class="glyphicon glyphicon-earphone" aria-hidden="true"></span>
     <div class="icon-caption">お電話</div>
 </div>
 }}
 ~
 
 
 *panel
 上部にパネルヘッダー、下部に内容が書かれてる1枚のパネルを生成するdiv
 classにpanel panel-infoを指定する。
 内部では、ヘッダー部はpane-headingを指定し、内容部分はpanel-bodyを指定すれば良い
 #sh(html){{
 <div class="panel panel-info">
 
     <div class="panel-heading">
         <h3 class="panel-title" id="panel-title">
             <span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span> 
             営業時間
         </h3>
     </div>
 
     <div class="panel-body">
         平日10時〜19時（土日・祝日は対応しておりません）
     </div>
 
 </div>
 }}
 ~
 
 *Bootstrap2 ⇒ Bootstrap3の変更点
-#ref(change.png,left,80%);
+Ver2ではrow-fluidとrowを使い分けていたのが、Ver3ではrowに統一された。
+#ref(change.png,left,70%);
